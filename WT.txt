 S1

S1_Q1

<?php
session_start();
//print_r($_SESSION);
?>

<html>
<head>
<title>Session</title>
</head>
<body>
<?php

	if(isset($_SESSION['count']))
		$_SESSION['count']=$_SESSION['count']+1;
	else
		$_SESSION['count']=$_SESSION['count']=1;
		echo $_SESSION['count']." times the web page has been accessed";
?>
</body>
</html>
S1_Q2
import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd
data_set=pd.read_csv('salary.csv')
x=data_set.iloc[:,1:2].values
y=data_set.iloc[:,2].values
print(data_set.head())
print(x)
print(y)
from sklearn.linear_model import LinearRegression
lin_regs=LinearRegression()
lin_regs.fit(x,y)
LinearRegression(copy_X=True,fit_intercept=True,n_jobs=None,normalize=False)
mtp.scatter(x,y,color="blue")
mtp.plot(x,lin_regs.predict(x),color="red")
mtp.title("salary estimation model using Linear Regression")
mtp.xlabel("position levels")
mtp.ylabel("salary")
mtp.show()
salary.csv
position,level,salary
buiseness analyst,1,45000
junior consultunt,2,50000
senior consultant,3,60000
manager,4,80000
country manager,5,110000

S2
S2_Q1
        html
<html>
<body>
<form action = "setcookie.php" method="get">
<center>
Select font style :
	<input type=text name=s1> <br> <br>
Select font size :
	<input type=text name=s> <br> <br>
Enter font color :
	<input type=text name=c> <br> <br>
Enter background color: 
	<input type=text name=b> <br> <br>
<input type=submit value="Next">
</center>
</form>
</body>
</html>
    php1
<?php
setcookie("set1", $_GET['s1'],time()+3600);
setcookie("set2", $_GET['c'],time()+3600);
setcookie("set3", $_GET['b'],time()+3600);
setcookie("set4", $_GET['s'],time()+3600);
echo "style is ".$_GET['s1'];
echo "<br> <br> color is" .$_GET['c'];
echo "<br> <br>background color is ".$_GET['b'];
echo "<br><br>size is ".$_GET['s'];
?>
<form action="setcookie1.php" method="get">
<input type=submit value=ok>
</form>
</body>
</html>
    php2
<?php
$style =$_COOKIE['set1'];
$color=$_COOKIE['set2'];
$size=$_COOKIE['set4'];
$b_color=$_COOKIE['set3'];
$msg="welcome ";
echo "<body bgcolor=$b_color>";
echo"<font color=$color size=$size>".$msg;
echo"</font></body>";
?>
S2_Q2
import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd
data_set=pd.read_csv('salary.csv')
x=data_set.iloc[:,1:2].values
y=data_set.iloc[:,2].values
print(data_set.head())
print(x)
print(y)
from sklearn.linear_model import LinearRegression
lin_regs=LinearRegression()
lin_regs.fit(x,y)
LinearRegression(copy_X=True,fit_intercept=True,n_jobs=None,normalize=False)
mtp.scatter(x,y,color="blue")
mtp.plot(x,lin_regs.predict(x),color="red")
mtp.title("salary estimation model using Linear Regression")
mtp.xlabel("position levels")
mtp.ylabel("salary")
mtp.show()

S3
S3Q1
html
<html>
<body>
<center>
<form action="login.php" method="post">
		<h1>Login</h1><br>
		<label>Username</label>
		<input type="text" placeholder="Enter Username" name="username" required><br>

		<label> Password <label>
		<input type="password" placeholder="Enter password" name="password" required><br>

		<input type="submit" value="Login">
</form>
</center>                     
</body>
</html>
php
<?php
session_start();
$username = $_SESSION['username'];
$password =  $_SESSION['password'];
//print_r($username);
//echo"<br>";
//print_r($password);
if(($username= "user") && ($password="123"))
{
	echo "Welcome ".$username;
}
else
{
	echo "Try";
}

session_destroy ();
?>

S3Q2
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
from sklearn import metrics
import seaborn as sn
import matplotlib.pyplot as plt
import pandas as pd
students={'ID':[1,2,3,4,5,6],'Gender':[0,1,1,0,1,0],'Age':[30,25,18,21,35,53]}
df=pd.DataFrame(students,columns=['ID','Gender','Age'])
print(df)
x=df[['ID','Gender']]
y=df['Age']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)
logistic_regression=LogisticRegression()
logistic_regression.fit(x_train,y_train)
y_pred=logistic_regression.predict(x_test)
confusion_matrix=pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['predicted'])
sn.heatmap(confusion_matrix,annot=True)
print('Accuracy is:',metrics.accuracy_score(y_test,y_pred))
plt.show()
print("prediction for new students")
new_students={'ID':[1,3,4,2,5,6],'Gender':['female','female','male','male','female','male']}
df2=pd.DataFrame(new_students,columns=['ID','Gender'])
y_pred=logistic_regression.prediction(df2)
print(df2)
print(y_pred)
S4
S4_Q1
HTML
<html>
<body>
<form action="emp.php" method="post">
<center> <h2>Enter Employee Details :</h2> <br>
<labl>Emp no :</label>
<input type=text name=eno> <br>
<label>Name :</label>
<input type=text name=enm> <br>
<label>Address :</label>
<input type=text name=eadd> <br>
<input type=submit value="Next">
</center>
</form>
</body>
</html>
php1
<?php

session_start();
$eno =$_SESSION['eno'];
$enm =$_SESSION['enm'];
$eadd =$_SESSION['eadd'];
?>

<html>
<body>
<form action="emp1.php" method="post">
<center>
<h2>Enter Earring of Employee:</h2>
<label>Basic :</label>
<input type="text" name="basic"><br>
<label>DA :</label>
<input type="text" name="da"><br>
<label>HRA : </label>
<input type="text" name="hra"><br>
<input type="submit" value="submit">
</center>
</form>
</body>
</html>
php2
<?php
session_start();
$basic = $_POST['basic'];
$da = $_POST['da'];
$hra =$_POST['hra'];

echo "Employee Details";
echo "Emp ID :", $_SESSION['eno']."<br>";
echo "Emp Name :", $_SESSION['enm']."<br>";
echo "Emp Address :",$_SESSION['eadd']."<br><br>";

echo "Basic :".$basic."<br>";
echo "DA :".$da. "<br>";
echo "HRA :".$hra."<br>";

$total =$basic+$da+$hra;
echo "Total of earning Is :".$total;
?>

S4_Q2
import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd
data_set=pd.read_csv('fish.csv')
x=data_set.iloc[:,1:2].values
y=data_set.iloc[:,2].values
print(data_set.head())
print(x)
print(y)
from sklearn.linear_model import LinearRegression
lin_regs=LinearRegression()
lin_regs.fit(x,y)
LinearRegression(copy_X=True,fit_intercept=True,n_jobs=None)
mtp.scatter(x,y,color="blue")
mtp.plot(x,lin_regs.predict(x),color="red")
mtp.title("salary estimation model using Linear Regression")
mtp.xlabel("fish name")
mtp.ylabel("weight")
mtp.show()
fish.csv
Species,Weight,length
bream,250,23.2
roach,200,27.6
whitefish,300,30
whale shark,350,35
tiger shark,410,35.7

S5
S5_Q1
<?xml version="1.0" encoding="UTF-8"?>
<Itemlist>
<Item>
	<ItemName>Apple</ItemName>
	<ItemPrice> 200</ItemPrice>
	<Quantity>11</Quantity>
</Item>
<Item>
	<ItemName>Orange</ItemName>
	<ItemPrice> 90</ItemPrice>
	<Quantity>13</Quantity>
</Item>
<Item>
	<ItemName>Banana</ItemName>
	<ItemPrice> 360</ItemPrice>
	<Quantity>3</Quantity>
</Item>
<Item>
	<ItemName> Mango</ItemName>
	<ItemPrice> 120</ItemPrice>
	<Quantity>14</Quantity>
</Item>

<Item>
	<ItemName> Pineapple</ItemName>
	<ItemPrice> 170</ItemPrice>
	<Quantity>3</Quantity>
</Item>
</Itemlist>
S5_Q2
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
from sklearn import metrics
import seaborn as sn
import matplotlib.pyplot as plt
import pandas as pd
students={'sepal_width':[1,2,3,4,5,6],'sepal_length':[3,4,5,6,7,6],'petal_width':[4,5,6,7,4,8],'petal_length':[3,4,7,5,6,7]}
df=pd.DataFrame(students,columns=['sepal_width','sepal_length','petal_width','petal_length'])
print(df)
print(df.describe())
x=df[['sepal_width','sepal_length','petal_length']]
y=df['petal_width']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)
logistic_regression=LogisticRegression()
logistic_regression.fit(x_train,y_train)
y_pred=logistic_regression.predict(x_test)
confusion_matrix=pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['predicted'])
sn.heatmap(confusion_matrix,annot=True)
print('Accuracy is:',metrics.accuracy_score(y_test,y_pred))
plt.show()
print("prediction for flower")
new_students={'sepal_width':[3,2,5,1,6,4],'sepal_length':[5,4,7,3,6,6],'petal_width':[6,8,7,5,4,4]}
df2=pd.DataFrame(new_students,columns=['sepal_width','sepal_length','petal_width'])
y_pred=logistic_regression.prediction(df2)
print(df2)
print(y_pred)
S6
S6_Q1
            XML
<?xml version='1.0' encoding='UTF-8'?>
<BookInfo>
<book>
<bookno>1</bookno>
<bookname>JAVA</bookname>
<authorname> Balguru Swami</authorname>
<price>250</price>
<year>2006</year>
</book>
<book>
<bookno>2</bookno>
<bookname>C</bookname>
<authorname> Denis Ritchie</authorname>
<price>500</price>
<year>1971</year>
</book>
</BookInfo>
        PHP
<html>
<body>
<pre>
<?php
	$Bookinfo = simplexml_load_file("book.xml");
	echo htmlspecialchars($Bookinfo -> asXML());
?>
</pre>
</body>
</html>
S6_Q2
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
dataset=[["milk","bread"],["bread","diaper","beer","eggs"],["milk","diaper","beer","coke"],["bread","diaper","beer","milk"],["milk","coak","bread","diaper"]]
te=TransactionEncoder()
te_array=te.fit(dataset).transform(dataset)
df=pd.DataFrame(te_array,columns=te.columns_)
print("Result after preprocessing:")
print(df)
frequent_itemsets_ap=apriori(df,min_support=0.01,use_colnames=True)
print("\n Result after apriori algorithm")
print(frequent_itemsets_ap)
rules_ap=association_rules(frequent_itemsets_ap,metric="confidence",min_threshold=0.8)
frequent_itemsets_ap['length']=frequent_itemsets_ap['itemsets'].apply(lambda x:len(x))
print("\n Frequent 2 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=2])
print("\n Frequent 3 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=3])
S7
S7_Q1
            XML
<?xml version="1.0" encoding="UTF-8"?>
<MovieInfo>
<Movie>
	<MovieNo>1</MovieNo> 
	<MovieTitle>Muramba</MovieTitle>
	<ActorName>Mithila Palkar, Amay Wagh</ActorName> 
	<ReleaseYear>2017</ReleaseYear>
</Movie>
<Movie>
	<MovieNo>2</MovieNo> 
	<MovieTitle>Kaccha Limbu</MovieTitle>
	<ActorName>Sonali Kulkarni, Ravi Jadhav</ActorName> 
	<ReleaseYear>2017</ReleaseYear>
</Movie>
<Movie>
	<MovieNo>3</MovieNo> 
	<MovieTitle>Sairat</MovieTitle>
	<ActorName>Akash Thosar, Rinku Rajguru</ActorName> 
	<ReleaseYear>2016</ReleaseYear>
</Movie>
<Movie>
	<MovieNo>4</MovieNo> 
	<MovieTitle>Faster Fene</MovieTitle>
	<ActorName>Amay Wagh, Parna Pethe</ActorName> 
	<ReleaseYear>2017</ReleaseYear>
</Movie>
<Movie>
	<MovieNo>5</MovieNo> 
	<MovieTitle>Ekda Kaay Zala</MovieTitle>
	<ActorName>Sumeet Ragavan,Urmila Kantikar</ActorName> 
	<ReleaseYear>2022</ReleaseYear>
</Movie>
</MovieInfo>
PHP
<?php
$dom = new DomDocument();
$dom->load("Movie.xml");

//print_r($xml); 

echo "Name of Movies<br>";
$mname = $dom->getElementsByTagName("MovieTitle");
foreach($mname as $m)
{
	echo "<b>$m->textContent<b><br>";
}
$mname = $dom->getElementsByTagName("ActorName");
foreach($mname as $m)
{
	echo "<b>$m->textContent<b><br>";
}
?>
S7_Q2
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
dataset=pd.read_csv('market.csv')
te=TransactionEncoder()
te_array=te.fit(dataset).transform(dataset)
df=pd.DataFrame(te_array,columns=te.columns_)
print("Result after preprocessing:")
print(df)
frequent_itemsets_ap=apriori(df,min_support=0.01,use_colnames=True)
print("\n Result after apriori algorithm")
print(frequent_itemsets_ap)
rules_ap=association_rules(frequent_itemsets_ap,metric="confidence",min_threshold=0.8)
frequent_itemsets_ap['length']=frequent_itemsets_ap['itemsets'].apply(lambda x:len(x))
print("\n Frequent 2 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=2])
print("\n Frequent 3 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=3])
market.csv
Mem_number,Date,month,year
21,12-10-23,4,2023
42,23-5-21,2,2020
55,4-7-17,9,1991
12,31-5-22,5,2021
32,28-7-21,8,1998

S8
S8_Q1
<html>
<head>    
<script>
function Exam_alert() {
alert('Exams are near, have you started preparing for?');
}
function add_prompt() {
var num1 = prompt('Enter the first number:');
var num2 = prompt('Enter the second number:');

num1 = parseFloat(num1);
num2 = parseFloat(num2);

  var result = num1 + num2;
  alert('The addition of ' + num1 + ' and ' + num2 + ' is: ' + result);
}

</script>
</head>
<body>
<input type="button" onclick="Exam_alert()" value ="show_alert_box"> <br>
<input type="button" onclick="add_prompt()" value ="add_prompt"> <br>
</body>
</html>
S8_Q2
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
dataset=pd.read_csv('/home/dell/DA Vrushali/Practicles/slip8.csv')
te=TransactionEncoder()
te_array=te.fit(dataset).transform(dataset)
df=pd.DataFrame(te_array,columns=te.columns_)
print("Result after preprocessing:")
print(df)
frequent_itemsets_ap=apriori(df,min_support=0.03,use_colnames=True)
print("\n Result after apriori algorithm")
print(frequent_itemsets_ap)
rules_ap=association_rules(frequent_itemsets_ap,metric="confidence",min_threshold=0.8)
frequent_itemsets_ap['length']=frequent_itemsets_ap['itemsets'].apply(lambda x:len(x))
print("\n Frequent 2 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=2])
print("\n Frequent 3 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=3])
 groceries.csv
mem_id,Date,Item_desc
2,23-4-2021,whole milk
3,12-2-2022,rolls/buns
4,08-05-2015,other vegetables
5,23-12-2015,pot plants
6,20-03-2015,whole milk

S10
S10_Q1
<!DOCTYPE html>
<html>
<head>
  <title>Insert Text using jQuery</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    $(document).ready(function() 
{
      $("p").before("This is inserted before the paragraph.");

      $("p").after("This is inserted after the paragraph.");
    });
  </script>
</head>
<body>
  <p>This is a paragraph.</p>
</body>
</html>
S10_Q2
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
dataset=[["milk","eggs","bread"],["eggs","apple"],["milk","bread"],["milk","apple"],["milk","apple","bread"]]
te=TransactionEncoder()
te_array=te.fit(dataset).transform(dataset)
df=pd.DataFrame(te_array,columns=te.columns_)
print("Result after preprocessing:")
print(df)
frequent_itemsets_ap=apriori(df,min_support=0.01,use_colnames=True)
print("\n Result after apriori algorithm")
print(frequent_itemsets_ap)
rules_ap=association_rules(frequent_itemsets_ap,metric="confidence",min_threshold=0.8)
frequent_itemsets_ap['length']=frequent_itemsets_ap['itemsets'].apply(lambda x:len(x))
print("\n Frequent 2 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=2])
print("\n Frequent 3 item sets")
print(frequent_itemsets_ap[frequent_itemsets_ap['length']>=3])
S17
S17_Q1
<!DOCTYPE html>
<html>
<head>
  <title>Student Registration Form</title>
  <script>   
 window.onload = function() {
      alert("Hello, Good Morning!");
    }
  </script>
</head>
<body>
  <h1>Student Registration Form</h1>
  <form>
    <label for="name">Name:</label>
    <input type="text" id="name" name="name"><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br>

    <label for="phone">Phone:</label>
    <input type="tel" id="phone" name="phone"><br>

    <input type="submit" value="Register">
  </form>
</body>
</html>
S17_Q2
import re
import nltk
nltk.download('punkt')
nltk.download('stopwords')
text="""so keep working.Keep striving never give up fall down seven times, get eight.Ease greater threat to progress than hardship. Ease greater threat to progress than hardship.So, keep moving, keep growing ,and keep learning.See you at work."""
text1 = re.sub(r'\[[0-9]*\]', ' ', text)
text2= re.sub(r'\s+', ' ', text1)
text3= re.sub('[^0-9]', ' ', text)
formatted_text = re.sub('[^a-zA-Z]', ' ', text)
print(text1)
print(text2)
print(text3)
print(formatted_text)
S18_Q1
<!DOCTYPE html>
<html>
<head>
  <title>Fibonacci Numbers</title>
  <script>
    function fibonacci()
    {
      var a = 0, b = 1, c;
      var limit = 10; 

      document.write(a);
    for (var i = 2; i <= limit; i++) 
    {
        document.write(b);
        c = a + b;
        a = b;
        b = c;
    }


    /*  for (var i = 2; i < limit; i++)
      {
        fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
      }

      var output = "";
      for (var i = 0; i < fibonacci.length; i++) {
        output += fibonacci[i] + " ";
      }

      document.getElementById("fibonacci").innerHTML = output;
    }*/

  </script>
</head>
<body>
  <h1>Fibonacci Numbers</h1>
  <button onclick="fibonacci()">Print Fibonacci Numbers</button>
</body>
</html>
S18_Q2
from nltk.tokenize import word_tokenize
from nltk.probability import FreqDist
import matplotlib.pyplot as plt
from nltk.tokenize import sent_tokenize
from nltk.tokenize import word_tokenize

paragraph_text="""Hello all, Welcome to Python Programming Academy. Python
Programming Academy is a nice platform to learn new programming skills. It is
difficult to get enrolled in this Academy."""
# Word Tokenization

tokenized_text_data=sent_tokenize(paragraph_text)
tokenized_words=word_tokenize(paragraph_text)
print("Tokenized Sentences : \n", tokenized_text_data, "\n")
print("Tokenized Words : \n",tokenized_words, "\n")
frequency_distribution=FreqDist(tokenized_words)
print(frequency_distribution)
print(frequency_distribution.most_common(2))
frequency_distribution.plot(32,cumulative=False)
plt.show()
S19
S19_Q1
<html>
<head>
  <title>User Login</title>
  <script>
    function validateUser() {
      var username = document.forms["loginForm"]["username"].value;
      var password = document.forms["loginForm"]["password"].value;

      if (username === "user" || password === "123") 
      {
        alert("validate user");
        return true;
      }
      else
        alert("Not validate user");
        return false;
    }
  </script>
</head>
<body>
  <h2>User Login</h2>
  <form name="loginForm" onsubmit="return validateUser()">
    <label >Username:</label>
    <input type="text" name="username" id="username">

    <label >Password:</label>
    <input type="password" name="password" id="password">

    <input type="submit" value="Submit">
  </form>
</body>
</html>
S19_Q2
import re  
import matplotlib.pyplot as plt  
from wordcloud import WordCloud, STOPWORDS  
text = open(":https://www.kaggle.com/nltkdata/movie-review/version/3?select=movie_review.csv to p", "r").read()  
text = re.sub(r'==.*?==+', '', text)  
text = text.replace('\n', '')    
def plot_cloud(wordcloud):  
    plt.figure(figsize=(40, 30))  
    plt.imshow(wordcloud)     
    plt.axis("off")   
wordcloud = WordCloud(width = 3000, height = 2000, random_state=1, background_color='salmon', colormap='Pastel1', collocations=False, stopwords = STOPWORDS).generate(text)
plot_cloud(wordcloud) 
plt.show()